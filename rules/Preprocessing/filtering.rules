FILTERING_CMD = """
        TMP_FILE=$(mktemp --tmpdir={TMPDIR} -t "alignment_XXXXXX.bam")
        BUFFER=$(mktemp --tmpdir={TMPDIR} -t "alignment_XXXXXX.bam")
        bwa mem -v 1 -t {THREADS} {input[3]} {input[0]} {input[1]} | samtools view -@ {THREADS} -bS - > $TMP_FILE
        samtools merge -@ {THREADS} -u - \
        <(samtools view -@ {THREADS} -u  -f 4 -F 264 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 8 -F 260 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 12 -F 256 $TMP_FILE) | \
        samtools view -@ {THREADS} -bF 0x800 -  | samtools sort -o -@ {THREADS} -m {MEMCORE}G -n - $BUFFER | \
        bamToFastq -i stdin -fq {output[0]} -fq2 {output[1]}
        if [[ -s {input[2]} ]]
        then
        bwa mem -v 1 -t {THREADS} {input[3]} {input[2]} | samtools view -@ {THREADS} -bS - | \
        samtools view -@ {THREADS} -uf 4 - | bamToFastq -i stdin -fq {output[2]}
        else
        echo "{input[2]} is empty, skipping single end human sequence filtering, but creating it anyway..."
        touch {output[2]}
        fi
        rm -rf $BUFFER* $TMP_FILE
        """

SYMLINK_CMD = """
ln -fs $(echo {input[0]} | cut -f 2 -d /) {output[0]} && touch -h {output[0]}
ln -fs $(echo {input[1]} | cut -f 2 -d /) {output[1]} && touch -h {output[1]}
ln -fs $(echo {input[2]} | cut -f 2 -d /) {output[2]} && touch -h {output[2]}
"""

rule filtering:
    input:
        'Preprocessing/r1.trimmed.fq',
        'Preprocessing/r2.trimmed.fq',
        'Preprocessing/se.trimmed.fq',
        expand(
            "{p}/filtering/{filter}.{ext}", filter=FILTER,
            ext=['fa', 'fa.amb', 'fa.ann', 'fa.bwt', 'fa.pac', 'fa.sa'], p=DBPATH)
    output:
        'Preprocessing/r1.trimmed.filtered.fq',
        'Preprocessing/r2.trimmed.filtered.fq',
        'Preprocessing/se.trimmed.filtered.fq'
    shell:
        FILTERING_CMD

rule symlink_mg_preprocessed_files:
    input:
        'Preprocessing/r1.trimmed.filtered.fq',
        'Preprocessing/r2.trimmed.filtered.fq',
        'Preprocessing/se.trimmed.filtered.fq'
    output:
        'Preprocessing/r1.preprocessed.fq',
        'Preprocessing/r2.preprocessed.fq',
        'Preprocessing/se.preprocessed.fq'
    shell:
        SYMLINK_CMD
